{"./":{"url":"./","title":"1.前言","keywords":"","body":"前言 关注到目前很多人都很是关注元服务如何开发，于是集合坚果派的力量，利用业余时间写了这本入门的《元服务开发实践》电子书并把它挂到网站上，希望能给读者带来一点帮助，也算为元服务以及整个大的鸿蒙生态的发展做一点贡献。 本书组织结构 本书以循序渐进的方式从元服务介绍入手，到最后的落地实践，分为五篇，共计 16 章，各篇的主要内容如下： 第一篇，入门篇（第1章~第5章），包括 元服务的介绍 第二篇，进阶篇（第6章~第12章）， 第三篇，高阶篇（第13章~第16章），包括 OpenHarmony 实现万物互联的核心分布式软总线介绍，它的应用场景：原子化服务和服务卡片，分布式数据库，分布式相机以及分布式屏幕等。该章节还在创作中。 第四篇，实战篇（第17章~第18章），通过极简计算器项目给读者串联一下以上各章节的知识点，让读者更深层次的理解 OpenHarmony 应用的开发流程以及项目实战中常用的开发技巧。 第五篇，源码篇（第 19 章），通过源码分析，讲解 OpenHarmony 应用的启动过程，比如 FA 的启动，abc 的加载和解析并生成 jsview 的流程，各节点的构建流程及各结点的测量、布局和绘制等操作，最后再讲解一下事件传递过程。 本书读者对象 读者至少熟悉一种编程语言，最好是 JavaScript/或者Dart 。 读者最好接触过移动端、Web 前端或者 PC 端开发。 本书只是简介类书籍，不适合编程的入门读物。 勘误 笔者写这本电子书使用的 SDK 是 NEXT 版本（API 12，5.0.0.71），由于ArkUI开发框架在不断更新中，本书的部分内容可能会和新版本的不一致，读者以最新的版本为准，另外由于时间仓促，本书难免有错误之处，如果读者发现错误欢迎在 https://gitee.com/ark-ui/arkui_in_action 上提 Issue，也可以加 QQ 群（695438501）反馈问题或者交流技术。 致谢 笔者写这本电子书的时候主要参考元服务官方文档，期间发现问题后并及时做了反馈，感谢鸿蒙专家们给做了耐心解答。另外非常感谢在 https://gitcode.com/nutpi/Flutter_Harmony 上和 QQ （695438501）群里给我反馈问题的小伙伴，最后感谢所有为 鸿蒙生态建设做出贡献的人，你们是最棒的！ powered by Gitbook该文件修订时间： 2024-11-05 15:22:33 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter2/Why.html":{"url":"chapter2/Why.html","title":"2.为什么要这个专栏？","keywords":"","body":"为什么 powered by Gitbook该文件修订时间： 2024-10-31 22:43:57 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter3/3.1什么是元服务.html":{"url":"chapter3/3.1什么是元服务.html","title":"3.1什么是元服务","keywords":"","body":"元服务 在万物互联时代，人均持有设备量不断攀升，设备种类和使用场景更加多样，使得应用开发、应用入口变得更加复杂。在此背景下，应用提供方和用户迫切需要一种新的服务提供方式，使应用开发更简单、服务（如听音乐、打车等）的获取和使用更便捷。为此，HarmonyOS除支持传统的需要安装的应用（以下简称传统应用）外，还支持更加方便快捷的免安装的应用，即元服务。 元服务是HarmonyOS提供的一种轻量应用程序形态，具备秒开直达，纯净清爽；服务相伴，恰合时宜；即用即走，账号相随；一体两面，嵌入运行；原生智能，全域搜索；高效开发，生而可信等特征。 元服务可独立上架、分发、运行，独立实现业务闭环，可大幅提升信息与服务的获取效率。 元服务基于HarmonyOS SDK（只能使用“元服务API集”）开发，支持运行在1+8+N设备上，供用户在合适的场景、合适的设备上便捷使用。 元服务与传统应用的对比 区别 特征 载体 API范围 经营 传统应用 手动下载安装 包大小无限制 按需使用 应用内或应用市场更新 功能齐全，开发成本高，周期长 跟随设备 全量API 自主运营人找应用成本高 元服务 免安装包大小有限制即用即走自动更新轻量化完整功能，开发成本较低 跟随华为账号 只能使用“元服务API集” 支付、地图、广告等经营履约能力辅助经营负一屏等系统分发入口帮助人找服务、服务找人 开发者基于经营目标、效率、成本、收益等因素，自主决定开发传统应用或元服务，也可以同时提供。 从应用程序入口看，下图展示了元服务与传统应用、服务卡片之间的关系。对于传统应用和元服务，均可选择服务卡片作为入口。 元服务与传统应用、服务卡片之间的关系。 元服务在开发态和运行态的基本视图如下图所示。 ‘ powered by Gitbook该文件修订时间： 2024-11-05 14:48:28 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter3/3.2元服务特征以及使用场景.html":{"url":"chapter3/3.2元服务特征以及使用场景.html","title":"3.2元服务特征及使用场景","keywords":"","body":"元服务特征 元服务区别于传统应用，具备如下特征，并适用于如下典型场景。 秒开直达，纯净清爽 元服务能够即点即用，实现秒开启动，丝滑流畅。 元服务默认隐匿登录直达使用，无弹窗干扰，给予用户纯净体验。 基于HarmonyOS，有多个分发入口，能够更高效地触达用户。 服务相伴，恰合适宜 服务面板在负一屏、锁屏界面等常伴跟随，服务履约过程中提供的信息由官方保障。 服务通知和状态恰和适宜的提醒，将提供更便捷、高效的服务闭环。 用完即走，帐号相随 用户使用完元服务后，退出无二次弹窗。 用户资产跟随账号，多设备安全同步。用户可随时找回自己的元服务。 一体两面，嵌入运行 元服务和应用是鸿蒙生态下的两种程序形态，元服务免安装，更为轻量。 两者可独立部署，也可以嵌入运行，助力商户私域运营。 原生智能，全域搜索 元服务是基于鸿蒙OS底座实现的原生智能最佳载体，提供精准的服务触达和原生自然的体验。 在全域搜索中，任何的服务都能触达用户。 高效开发，生而可信 提供元服务标准UX组件集、场景化模板及API集，同时构建元服务生态规则，开发者在规则之上高效开发，实现生而可信。 元服务的典型使用场景 基于上述特征，元服务的典型使用场景如下。 常用服务卡片添加到桌面，体验快捷服务 例如：将常用的天气、备忘录及热点新闻列表等服务卡片添加到桌面上，解锁手机即可在桌面上查看即时信息。 同时，通过负一屏发现服务卡片，无需安装即可使用热点服务卡片。 释放手机，让用户在更合适的设备上享受服务 例如：打车是人们日常生活中经常使用的服务，通常人们在手机上打车，需要一直停留在手机界面才能准确获取司机的状态信息。 有了元服务的分布式能力，在手机打车后，将司机状态实时同步到手表，无需查看手机，抬腕即可获取司机状态。 powered by Gitbook该文件修订时间： 2024-11-01 08:08:15 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter3/3.3元服务程序包基础知识.html":{"url":"chapter3/3.3元服务程序包基础知识.html","title":"3.3元服务程序包基础知识","keywords":"","body":"元服务的程序包结构与传统应用程序包相同，也是以App Pack（.app）形式发布到应用市场。 但元服务相对于需要安装的应用形态更加轻量、便捷，其程序包也具备一些独有特征，如免安装、分包、预加载、老化。 免安装 免安装是指无需用户通过应用市场显式安装，用户点击元服务后，由系统程序框架后台安装后即可使用。 元服务中所有包HAP（Harmony Ability Package）、HSP（Harmony Shared Package）均需支持免安装。 分包 HarmonyOS每个应用程序包（.app）可以包含多个包文件（以.hap为后缀的HAP或以.hsp为后缀的HSP）。元服务在此基础上，进一步限制每个HAP或HSP（含其依赖的所有共享包）的大小，以实现快速启动体验，元服务的这种多包开发方案称为“分包”。 具体的分包规格： 首包：将Entry HAP作为首包，包含元服务首次启动时会打开的页面（即首页）代码和资源。 分包：将其他包含功能页的模块以及HSP动态共享模块作为分包，包含功能页和元服务依赖的代码和资源。 单个包文件（加上其依赖的所有共享包），大小不能超过2MB，超过限制DevEco Studio会打包失败。 同一个元服务下所有包文件（加上其依赖的所有共享包）的大小总和不能超过10MB，超过限制DevEco Studio会打包失败。如因业务需要，可向平台申请总包大小放宽至20M。 这样，启动元服务时，只需下载和安装首包，即可立即启动元服务，大大缩短元服务启动时间。 图1 采用分包的元服务开发态视图 分包建议： 单个HAP或HSP（加上其依赖的所有共享包）大小超过2M，就需要考虑分包。 建议开发者按照不同的功能进行分包。 重复代码和资源抽离出来作为HSP，进一步减小包大小。 下图展示了一个元服务的开发态视图，该元服务具有： 一个名为HomeModule的首包模块 一个名为FeatureModule的分包模块 一个名为SharedLibraryModule的HSP动态共享模块 一个名为StaticLibraryModule的静态共享模块 图2 元服务分包的工程目录结构图 其中HomeModule模块为元服务的“首包”，type字段为entry，以下是HomeModule模块的module.json5文件： { \"module\": { \"name\": \"HomeModule\", \"type\": \"entry\", \"pages\": \"$profile:main_pages\", ... } } FeatureModule模块为功能页“分包”，type字段为feature，以下是FeatureModule模块的module.json5文件： { \"module\": { \"name\": \"FeatureModule\", \"type\": \"feature\", ... } } SharedLibraryModule模块为共享“分包”，type字段为shared，以下是SharedLibraryModule模块的module.json5文件： { \"module\": { \"name\": \"SharedLibraryModule\", \"type\": \"shared\", ... } } StaticLibraryModule模块为静态共享包，type字段为har，以下是StaticLibraryModule模块的module.json5文件： { \"module\": { \"name\": \"StaticLibraryModule\", \"type\": \"har\", ... } } 预加载 开发者可以通过配置预加载，由系统自动下载和安装可能需要的分包模块，从而提升进入后续模块的速度。 对于配置了预加载的分包模块，当点击进入该模块并完成页面加载后，将触发关联模块的预加载。 配置预加载 预加载在相应分包模块module.json5配置文件中“atomicService”标签下的preloads字段配置。以HomeModule模块的module.json5为例： { \"module\": { \"name\": \"HomeModule\", \"type\": \"entry\", \"installationFree\": true, \"pages\": \"$profile:main_pages\", \"atomicService\": { \"preloads\": [ { \"moduleName\": \"FeatureModule\" } ] }, ... } } 在HomeModule模块的页面加载结束后，系统会自动执行预加载，去下载和安装模块名为FeatureModule的模块。 注意 preloads列表配置的moduleName对应的ModuleType（模块类型）不能为entry。 老化 系统会按照一定策略清理不活跃的元服务，释放空间，这个过程称为老化。具体老化机制如下。 老化时机：由系统定时器触发老化，当系统中所有元服务占用总空间大于既定阈值时，将启动老化，同时要求设备处于熄屏状态，且剩余电量不低于10%。 老化顺序：优先老化长时间未使用及使用频率较低且未添加桌面卡片的元服务。 分级老化：根据数据重要性排序，分级老化。当系统满足老化时机的要求时，按照老化顺序优先清理元服务的Cache目录数据，再按照老化顺序清理元服务的其他目录数据，直到系统中所有元服务占用总空间小于既定阈值的80%。因此，开发者应合理规划数据存放目录，仅将非重要数据（例如网络缓存图片等）存放到Cache目录，避免重要数据被频繁老化清理。 图3 元服务老化示意图 元服务程序包更新机制 元服务在重新加载启动时（首次打开或销毁后被用户再次打开），会异步检查是否有更新版本。如果发现有新版本，将会异步下载新版本的程序包。但当次启动仍会使用客户端本地的旧版本程序，新版本的元服务将在下一次重新加载启动时使用。 powered by Gitbook该文件修订时间： 2024-11-05 08:12:12 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/SUMMARY.html":{"url":"chapter4/SUMMARY.html","title":"4.元服务开发流程","keywords":"","body":"元服务开发旅程 powered by Gitbook该文件修订时间： 2024-10-31 22:53:26 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/4.1开发前.html":{"url":"chapter4/4.1开发前.html","title":"4.1开发前","keywords":"","body":"开发前 创建元服务项目前，需要注册华为开发者帐号并创建您的元服务；然后搭建开发环境，通过DevEco Studio创建元服务工程。 说明 元服务包名命名格式需要使用com.atomicservice.[appid]，请先在网站创建元服务，获取AppID后再创建工程。 在AppGallery Connect上，可以通过“我的元服务”选择对应元服务，在“应用信息”可查询元服务的appid。 powered by Gitbook该文件修订时间： 2024-11-05 08:12:42 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/4.2开发中.html":{"url":"chapter4/4.2开发中.html","title":"4.2开发中","keywords":"","body":"开发中 元服务包含页面、卡片、图标三个部分，请分别参考UI开发、服务卡片开发、生成元服务图标。 DevEco Studio提供元服务图片生成工具，开发者可以通过上传指定尺寸和格式的图片，快速生成元服务图标。 同时，DevEco Studio提供真机调试能力，开发者可快速通过真机运行调试查看运行效果。 powered by Gitbook该文件修订时间： 2024-11-01 08:06:52 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/4.3打包.html":{"url":"chapter4/4.3打包.html","title":"4.3打包","keywords":"","body":"打包 可通过DevEco Studio快速打包生成发布版本，使用此版本，可以用于开放式测试或提交上架审核。 powered by Gitbook该文件修订时间： 2024-11-01 08:07:00 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/4.4测试.html":{"url":"chapter4/4.4测试.html","title":"4.4测试","keywords":"","body":"测试 在正式发布元服务前，您可以发布一个开放式测试版本，邀请部分用户提前体验新版本，并收集用户的反馈，以便提前发现问题进行改进，从而保证全网版本的质量，提升用户体验。 powered by Gitbook该文件修订时间： 2024-11-01 08:07:09 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/5.1创建元服务工程.html":{"url":"chapter5/5.1创建元服务工程.html","title":"5.1创建元服务工程","keywords":"","body":"1.若首次打开DevEco Studio，请选择Create Project开始创建一个新工程。如果已经打开了一个工程，请在菜单栏选择File > New > Create Project来创建一个新工程。选择Atomic Service元服务开发，选择模板，单击Next进行下一步配置。 当前元服务支持的模板类型： Empty Ability：用于Phone、Tablet设备的模板，展示基础的Hello World功能。 [CloudDev]Empty Ability：端云一体化开发通用模板。更多信息请参见端云一体化开发。 Embeddable Ability：用于开发支持被其他应用嵌入式运行的元服务的工程模板。 2.点击Sign In登录华为开发者账号进行开发，或选择访客模式体验。访客模式无需登录华为账号。 说明 访客模式仅用于体验元服务开发功能。如需将访客模式下开发的元服务工程或历史元服务工程在真机上运行并安装，需在AppScope > app.json5文件中补充当前开发者账号下已在AppGallery注册且真实存在的包名。 在弹出的网页界面中点击 允许 ，完成访问账号授权。 选择已登录账号下的APP ID。如您未在AppGallery中注册元服务应用，点击 Register APP ID 注册新的APP ID。 说明 仅元服务应用的APP ID将在当前界面展示。如需新建应用，应用类型请选择“元服务”。 完成注册后，回到DevEco Studio界面，点击 Refresh ，刷新当前APP ID列表，选择新生成的APP ID，点击 Next 。 注意 元服务的Bundle name采用固定前缀和appid组合方式（com.atomicservice.[appid]）命名，Bundle name为自动生成，开发者无法手动修改。不符合命名规范的包名无法在APP ID下拉列表中展示。 进入配置工程界面，填写Project name，其他参数保持默认设置即可。 7.单击Finish，工具会自动生成示例代码和相关资源，等待工程创建完成。 元服务工程目录结构如下。 AppScope > app.json5：元服务的全局配置信息。 entry ：HarmonyOS工程模块，编译构建生成一个HAP。 src > main > ets：用于存放ArkTS源码。 src > main > ets > entryability：元服务的入口。 src > main > ets > pages：元服务包含的页面。 src > main > resources：用于存放元服务所用到的资源文件，如图形、多媒体、字符串、布局文件等。关于资源文件，详见资源分类与访问。 src > main > module.json5：模块配置文件。主要包含HAP的配置信息、元服务在具体设备上的配置信息以及元服务的全局配置信息。具体的配置文件说明，详见module.json5。 build-profile.json5：当前的模块信息 、编译信息配置项，包括buildOption、targets配置等。 hvigorfile.ts：模块级编译构建任务脚本，开发者可以自定义相关任务和代码实现。 oh_modules：用于存放三方库依赖信息。 build-profile.json5：元服务级配置信息，包括签名signingConfigs、产品配置products等。 hvigorfile.ts：元服务级编译构建任务脚本。 powered by Gitbook该文件修订时间： 2024-11-05 08:20:33 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/5.2生成元服务图标.html":{"url":"chapter5/5.2生成元服务图标.html","title":"5.2生成元服务图标","keywords":"","body":"生成元服务图标 DevEco Studio支持Image Asset功能，帮助开发者生成统一的元服务图标样式。 在工程中选中模块或文件，右键单击New > Image Asset，进入图标配置页面。 在Path中选择本地图片路径。图片尺寸及要求如下： 图标格式：.png、.jpeg、.jpg格式的静态图片资源； 图标尺寸：1024 x 1024 px （正方形）； 图标背景：不透明； 质量要求：图标内容需清晰可辨，避免存在模糊、锯齿、拉伸等问题。详见元服务图标设计规范。 在预览界面可以配置图标颜色、名称、保存路径等。 Color：推荐使用的图标颜色。选择不同颜色，右边图标预览区域可查看相应的效果。 Name：生成的图标名称。 Res Directory：生成的512px*512px尺寸图标在工程中的保存位置。 Save to：生成的216px*216px尺寸图标需要指定本地文件夹的保存位置。后续在AppGallery Connect上架元服务时，需使用该图标。 点击OK，保存配置并在相应模块目录src > main > resources > base > media路径下生成元服务图标。可在模块级module.json5中的icon字段中配置元服务图标。 powered by Gitbook该文件修订时间： 2024-11-05 08:24:29 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/5.3构建元服务页面.html":{"url":"chapter5/5.3构建元服务页面.html","title":"5.3构建元服务页面","keywords":"","body":"下面我们将构建元服务的两个页面，并按预定的业务逻辑，实现页面间跳转. 构建元服务的第一个页面 使用文本组件。 工程同步完成后，在“Project”窗口，单击“entry > src > main > ets > pages”，打开“Index.ets”文件，可以看到页面由Text组件组成。 针对本文中使用文本/按钮来实现页面跳转/返回的应用场景，页面均使用Row和Column组件来组建布局。对于更多复杂元素对齐的场景，可选择使用RelativeContainer组件进行布局。 “Index.ets”文件的示例如下 import { authentication } from '@kit.AccountKit'; import { BusinessError } from '@kit.BasicServicesKit'; import { hilog } from '@kit.PerformanceAnalysisKit'; @Entry @Component struct Index { @State message: string = 'Hello World'; build() { Row() { Column() { Text(this.message) .fontSize(50) .fontWeight(FontWeight.Bold) } .width('100%') } .height('100%') } aboutToAppear() { hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate'); this.loginWithHuaweiID(); } /** * Sample code for using HUAWEI ID to log in to atomic service. * According to the Atomic Service Review Guide, when a atomic service has an account system, * the option to log in with a HUAWEI ID must be provided. * The following presets the atomic service to use the HUAWEI ID silent login function. * To enable the atomic service to log in successfully using the HUAWEI ID, please refer * to the HarmonyOS HUAWEI ID Access Guide to configure the client ID and fingerprint certificate. */ private loginWithHuaweiID() { // Create a login request and set parameters let loginRequest = new authentication.HuaweiIDProvider().createLoginWithHuaweiIDRequest(); // Whether to forcibly launch the HUAWEI ID login page when the user is not logged in with the HUAWEI ID loginRequest.forceLogin = false; // Execute login request let controller = new authentication.AuthenticationController(); controller.executeRequest(loginRequest).then((data) => { let loginWithHuaweiIDResponse = data as authentication.LoginWithHuaweiIDResponse; let authCode = loginWithHuaweiIDResponse.data?.authorizationCode; // Send authCode to the backend in exchange for unionID, session }).catch((error: BusinessError) => { hilog.error(0x0000, 'testTag', 'error: %{public}s', JSON.stringify(error)); if (error.code == authentication.AuthenticationErrorCode.ACCOUNT_NOT_LOGGED_IN) { // HUAWEI ID is not logged in, it is recommended to jump to the login guide page } }); } } powered by Gitbook该文件修订时间： 2024-11-05 08:25:22 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/5.4新建元服务卡片.html":{"url":"chapter5/5.4新建元服务卡片.html","title":"5.4新建元服务卡片","keywords":"","body":"新建元服务卡片 在元服务中新建一张卡片。 在“Project”窗口，在“entry”模块目录右键选择“New > Service Widget > Dynamic Widget”，进入卡片模板选择界面，如下图所示： 选择“Hello World”卡片模板，点击“Next”，进入卡片配置页面： Service widget name：卡片的名称，在同一个应用/服务中，卡片名称不能重复，且只能包含大小写字母、数字和下划线。 Display name：卡片预览面板上显示的卡片名称。仅API 11 及以上Stage工程支持配置该字段。 Description：卡片的描述信息。 Language ：界面开发语言，可选择创建ArkTS/JS卡片。 说明 元服务只支持ArkTS卡片，不支持JS卡片。 Support dimension：选择卡片的规格。部分卡片支持同时设置多种规格。首次创建服务卡片时，将默认生成一个EntryCard目录，用于存放卡片快照。 Default dimension：在下拉框中可选择默认的卡片。 Ability name：选择一个挂靠服务卡片的Form Ability，或者创建一个新的Form Ability。 Module name：卡片所属的模块。 卡片配置信息保持默认设置即可，点击“Finish”完成元服务默认卡片的新建。 powered by Gitbook该文件修订时间： 2024-11-05 08:27:31 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/5.5使用真机运行元服务.html":{"url":"chapter5/5.5使用真机运行元服务.html","title":"5.5使用真机运行元服务","keywords":"","body":"使用真机运行元服务 将真机与电脑连接。具体指导及要求，请参见运行应用/服务。 选择File > Project Structure... > Project > SigningConfigs界面，勾选“Support HarmonyOS”和“Automatically generate signature”，单击界面提示的“Sign In”，使用华为账号登录。等待自动签名完成后，单击“OK”即可。 说明 在自动签名的过程中，会校验APP ID和包名的合法性。如出现报错，请及时修改。访客模式无法使用自动签名功能。 将元服务的卡片添加到桌面，以便访问元服务。 在桌面上双指捏合，进入桌面的编辑模式。 点击底部的“服务卡片”。 在卡片添加页面，选择要添加到桌面的卡片，点击“添加到桌面”，完成卡片添加。 完成卡片添加后，可以在真机上测试元服务卡片的动效，也可点击卡片空白区域测试拉起元服务页面的功能。 拉起元服务页面进行测试。 可以使用Ability助手拉起元服务页面。 hdc shell aa start -a EntryAbility -b 元服务包名 powered by Gitbook该文件修订时间： 2024-11-05 08:34:41 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.1元服务开发准备.html":{"url":"chapter6/6.1元服务开发准备.html","title":"6.1元服务开发准备","keywords":"","body":"在开始元服务开发前，需要先完成以下准备工作。 注册成为开发者 在华为开发者联盟网站上，注册成为开发者，并完成实名认证，从而享受联盟开放的各类能力和服务。 创建元服务 在AppGallery Connect（简称AGC）上，参考创建项目和创建元服务完成HarmonyOS元服务的创建，从而使用各类服务。 配置安装DevEco Studio 安装最新版DevEco Studio。具体安装指导请参见安装DevEco Studio。 如何在DevEco Studio中创建工程、构建元服务页面、新建元服务卡片等，可参考开发第一个元服务。 （可选）添加公钥指纹 当应用需要使用以下开放能力的一种或多种时，为正常调试运行应用，需要预先添加公钥指纹。 Account Kit（华为帐号服务） Health Service Kit（运动健康服务） IAP Kit（应用内支付服务） Map Kit（地图服务） Payment Kit（华为支付服务） Wallet Kit（钱包服务） 添加公钥指纹的步骤如下。 申请应用证书（.cer）、Profile（.p7b）文件，具体操作请参见调试HarmonyOS应用/元服务。 powered by Gitbook该文件修订时间： 2024-11-01 08:28:39 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.2元服务框架开发.html":{"url":"chapter6/6.2元服务框架开发.html","title":"6.2元服务框架开发","keywords":"","body":"应用模型 元服务的应用模型只支持Stage模型，参考Stage模型开发指南。 元服务与传统应用的应用模型差异点主要体现在ExtensionAbility，具体如下： 元服务ExtensionAbility组件只支持FormExtensionAbility这一种类型。 应用上下文ExtensionContext只能被FormExtensionContext继承。 此外，元服务还有如下约束限制： 不支持启动UIAbility时指定窗口模式。 不支持通过Call调用实现UIAbility交互。 不支持使用ApplicationContext订阅回调低内存判断。 不支持使用createBundleContext(bundleName:string)方法，创建其他应用的Context信息。 不支持使用createModuleContext(bundleName:string, moduleName:string)方法，获取指定应用指定Module的上下文信息。 访问控制 元服务针对访问控制的开发与传统应用的开发方式大致相同，详见访问控制开发指导。 分包加载 跳转 powered by Gitbook该文件修订时间： 2024-11-01 08:29:31 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.4服务卡片开发.html":{"url":"chapter6/6.4服务卡片开发.html","title":"6.4服务卡片开发","keywords":"","body":"服务卡片的具体开发方式请参见服务卡片开发指导。 服务卡片的详细设计规范请参见服务卡片设计。 服务卡片刷新的具体开发方式请参见推送卡片刷新消息。 约束限制 整个元服务内最多允许添加16张卡片。同时每个卡片支持的所有尺寸都需要提供对应尺寸的卡片快照。 元服务不得通过服务卡片直接跳转到其他应用或其他元服务。 服务卡片开发指导部分章节（如使用call事件拉起指定UIAbility到后台，通过router或call事件刷新卡片内容）的示例中使用了非元服务高阶API的能力，在元服务中暂不支持这些功能。 性能优化 合理选择卡片刷新方式，降低服务卡片刷新功耗。 为避免卡片频繁刷新带来的功耗问题，建议按照业务必要性选择合适的定时刷新间隔；即使元服务进程启动后也不要连续频繁刷新卡片。 说明 系统会根据卡片可见状态、整机负载、卡片刷新频次等因素综合决定卡片是否可以刷新。 采用以下方法，降低服务卡片对系统资源的占用。 为卡片设计合适的信息结构 根据卡片大小，为卡片设计合适的信息结构，如控件、文本、图片等元素的数量及布局，保持服务卡片简洁易操作，避免造成卡片过于复杂，难于使用，同时也避免造成系统资源的浪费。 卡片不承载复杂的界面效果或交互逻辑 不建议通过服务卡片实现高频的动态变换界面效果（如GIF动态图片、Swiper控件及连续高频调用updateForm接口等）。 不在卡片内执行复杂交互，例如通过点击按钮出现二级选项后再选择下一步操作，或在卡片内使用长按或多指操作。 选择适合于当前显示设备的图片资源 避免使用超过当前设备屏幕分辨率的高清图片资源，否则会带来内存及CPU资源的浪费。 开发者使用图片资源时，应该充分考虑目标设备上显示图片的长宽及像素密度，卡片实际显示的尺寸可参考尺寸与基础参数。 通常按照“DPI*界面实际显示宽高”提供图片资源。若考虑显示时的效果和精细度，可参照如下公式提供图片资源： 图片宽高乘积 对于图片资源的格式，可参考下表。除此之外，还可以使用WebP等格式提供资源。 | 用途 | 建议 | | -------- | ------------------------------------------------------------ | | 展示动画 | 优先使用ArkUI提供的属性动画、帧动画能力来实现动画和动效效果；无法满足效果时可以选择GIF图。 | | 展示图片 | 从平衡图片资源体积和显示效果角度，建议如果图片没有透明属性，优先选择JPEG图片资源；如果有透明属性，则选择PNG图片资源。 | powered by Gitbook该文件修订时间： 2024-11-05 08:35:54 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.5基础能力开发.html":{"url":"chapter6/6.5基础能力开发.html","title":"6.5基础能力开发","keywords":"","body":" 网络 数据 文件 音视频 媒体会话 相机 媒体库 图片 窗口 设备管理 基础通信 联系人 Web 元服务分享 AI能力 运动健康 云开发 安全 本地化开发服务 长时任务 日志 ArkTS 自动化测试 powered by Gitbook该文件修订时间： 2024-11-05 08:36:12 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.6经营履约能力开发.html":{"url":"chapter6/6.6经营履约能力开发.html","title":"6.6经营履约能力开发","keywords":"","body":" 账号 推送 扫码 位置 地图 支付 应用内支付 广告 场景化组件 powered by Gitbook该文件修订时间： 2024-11-05 08:36:24 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter11/11.1元服务是什么？.html":{"url":"chapter11/11.1元服务是什么？.html","title":"11.1元服务是什么？和App什么关系？","keywords":"","body":"元服务是什么？和App什么关系？ 元服务是一种HarmonyOS轻量应用形态，用户无需安装即可使用，具备随处可及、服务直达、自由流转的特征。 元服务是可以独立部署和运行的程序实体，独立于应用，不依赖应用可独立上架、部署和独立运行完成业务闭环。 元服务和App是HarmonyOS生态的“一体两面”，是生态伙伴面向用户的两种形态。 开发者既可以开发元服务、也可以开发App，也可以同时开发 powered by Gitbook该文件修订时间： 2024-11-05 08:55:58 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter11/11.2元服务与App、卡片、小程序有什么区别.html":{"url":"chapter11/11.2元服务与App、卡片、小程序有什么区别.html","title":"11.2元服务与App、卡片、小程序有什么区别？","keywords":"","body":"元服务是HarmonyOS原生操作系统中的创新的服务体验形态； 元服务区别于App：元服务是免下载免安装的，免登录，全量发布，即点即用。支持AI分发，获客成本低于App。 元服务区别于卡片：服务卡片是HarmonyOS系统支持服务信息外显的产品，可以将元服务或App的重要信息外显在桌面上；元服务是开发者为用户提供服务的载体，是服务本身。 元服务区别于小程序：与小程序基于App运行不同，元服务是基于OS原生框架运行的，可以在系统更多的浅层入口曝光，和系统更深度的结合，在不同的场景下，提供更丰富的交互体验。对于开发者，可以开发一套代码，部署到HarmonyOS 2in1、平板、车机多端。 powered by Gitbook该文件修订时间： 2024-11-05 08:56:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter11/11.3开发App和开发元服务如何选择？.html":{"url":"chapter11/11.3开发App和开发元服务如何选择？.html","title":"11.3开发App和开发元服务如何选择？","keywords":"","body":" HarmonyOS原生应用和元服务是“一体两面”，App和元服务并不是互斥的关系，开发者可以根据自身的业务形态、业务特点去选择。 元服务的优势在于拥有更轻量的形态，更容易触达用户，提供秒开清爽，用完即走的丝滑体验。 元服务开发工作量相对比开发App更少，基于元服务高阶API集能够更容易完成功能开发。 元服务在系统级有多浅层入口帮助伙伴服务分发给用户，能够实现多种消息能力触达用户。 同一个业务下，App和元服务能够起到互为补充的作用，App专注私域流量的获取和转化，元服务通过HarmonyOS服务分发能力触达更多、更精准的用户，对App的用户形成补充 powered by Gitbook该文件修订时间： 2024-11-05 08:56:28 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter11/11.4开发了App，再开发元服务有什么价值.html":{"url":"chapter11/11.4开发了App，再开发元服务有什么价值.html","title":"11.4开发了App，再开发元服务有什么价值？","keywords":"","body":"元服务是HarmonyOS提供的除App外的另一种轻量程序形态，用户无需安装即可使用，具备随处可及、服务直达、自由流转等特征，是可以独立部署和运行的程序实体，独立于应用，不依赖应用可独立上架、部署和独立运行完成业务闭环。 元服务和App并不是互斥关系，生态伙伴可以开发App、也可以开发元服务、也可以都开发来给用户提供服务，开发者基于经营目标、效率、成本、收益自主决定 powered by Gitbook该文件修订时间： 2024-11-05 08:56:37 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter11/11.5对接华为支付的关键信息.html":{"url":"chapter11/11.5对接华为支付的关键信息.html","title":"11.5对接华为支付的关键信息","keywords":"","body":" 5行代码即可完成支付接入，开发工作量小。 华为支付是华为公司统一对外提供的安全、稳定、便捷的支付产品，由华为持牌的花瓣支付机构提供服务。 华为支付是基于HarmonyOS的原生支付体验，接入华为支付能够提供良好的系统级支付体验。 元服务如涉及购买行为，需集成HarmonyOS统一收银台，通过系统预置的常用支付方式实现收银服务。 powered by Gitbook该文件修订时间： 2024-11-05 08:56:47 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter12/12.1网络.html":{"url":"chapter12/12.1网络.html","title":"12.1网络","keywords":"","body":"网络管理模块主要提供以下功能： HTTP数据请求：通过HTTP发起一个数据请求。 WebSocket连接：使用WebSocket建立服务器与客户端的双向连接。 网络连接管理：网络连接管理提供管理网络一些基础能力，包括Wi-Fi/蜂窝/Ethernet等多网络连接优先级管理、网络质量评估、订阅默认/指定网络连接状态变化、查询网络连接信息、DNS解析等功能。 MDNS管理：MDNS即多播DNS（Multicast DNS），提供局域网内的本地服务添加、移除、发现、解析等能力。 HTTP数据请求 应用通过HTTP发起一个数据请求，支持常见的GET、POST、OPTIONS、HEAD、PUT、DELETE、TRACE、CONNECT方法。 接口说明 HTTP数据请求功能主要由http模块提供。 使用该功能需要申请ohos.permission.INTERNET权限。 涉及的接口如下表，具体的接口说明请参考API文档。 接口名 描述 createHttp() 创建一个http请求。 request() 根据URL地址，发起HTTP网络请求。 destroy() 中断请求任务。 on(type: 'headersReceive') 订阅HTTP Response Header 事件。 off(type: 'headersReceive') 取消订阅HTTP Response Header 事件。 request接口开发步骤 从@ohos.net.http中导入http命名空间。 调用createHttp()方法，创建一个HttpRequest对象。 调用该对象的on()方法，订阅http响应头事件，此接口会比request请求先返回。可以根据业务需要订阅此消息。 调用该对象的request()方法，传入http请求的url地址和可选参数，发起网络请求。 按照实际业务需要，解析返回结果。 调用该对象的off()方法，取消订阅http响应头事件。 当该请求使用完毕时，调用destroy()方法主动销毁。 // 引入包名 import http from '@ohos.net.http'; import { BusinessError } from '@ohos.base'; // 每一个httpRequest对应一个HTTP请求任务，不可复用 let httpRequest = http.createHttp(); // 用于订阅HTTP响应头，此接口会比request请求先返回。可以根据业务需要订阅此消息 // 从API 8开始，使用on('headersReceive', Callback)替代on('headerReceive', AsyncCallback)。 httpRequest.on('headersReceive', (header) => { console.info('header: ' + JSON.stringify(header)); }); httpRequest.request( // 填写HTTP请求的URL地址，可以带参数也可以不带参数。URL地址需要开发者自定义。请求的参数可以在extraData中指定 \"EXAMPLE_URL\", { method: http.RequestMethod.POST, // 可选，默认为http.RequestMethod.GET // 开发者根据自身业务需要添加header字段 header: { 'Content-Type': 'application/json' }, // 当使用POST请求时此字段用于传递请求体内容，具体格式与服务端协商确定 extraData: \"data to send\", expectDataType: http.HttpDataType.STRING, // 可选，指定返回数据的类型 usingCache: true, // 可选，默认为true priority: 1, // 可选，默认为1 connectTimeout: 60000, // 可选，默认为60000ms readTimeout: 60000, // 可选，默认为60000ms usingProtocol: http.HttpProtocol.HTTP1_1, // 可选，协议类型默认值由系统自动指定 usingProxy: false, // 可选，默认不使用网络代理，自API 10开始支持该属性 }, (err: BusinessError, data: http.HttpResponse) => { if (!err) { // data.result为HTTP响应内容，可根据业务需要进行解析 console.info('Result:' + JSON.stringify(data.result)); console.info('code:' + JSON.stringify(data.responseCode)); // data.header为HTTP响应头，可根据业务需要进行解析 console.info('header:' + JSON.stringify(data.header)); console.info('cookies:' + JSON.stringify(data.cookies)); // 8+ // 当该请求使用完毕时，调用destroy方法主动销毁 httpRequest.destroy(); } else { console.error('error:' + JSON.stringify(err)); // 取消订阅HTTP响应头事件 httpRequest.off('headersReceive'); // 当该请求使用完毕时，调用destroy方法主动销毁 httpRequest.destroy(); } } ); 网络连接管理 简介 网络连接管理提供管理网络一些基础能力，包括Wi-Fi/蜂窝/Ethernet等多网络连接优先级管理、网络质量评估、订阅默认/指定网络连接状态变化、查询网络连接信息、DNS解析等功能。 为了保证应用的运行效率，大部分API调用都是异步的，对于异步调用的API均提供了callback和Promise两种方式，以下示例均采用callback函数，更多方式可以查阅API参考。 开发语言：JS、C 基本概念 网络生产者：数据网络的提供方，比如Wi-Fi、蜂窝、Ethernet等。 网络消费者：数据网络的使用方，比如应用或系统服务。 网络探测：检测网络有效性，避免将网络从可用网络切换到不可用网络。内容包括绑定网络探测、DNS探测、HTTP探测及HTTPS探测。 网络优选：处理多网络共存时选择最优网络。在网络状态、网络信息及评分发生变化时被触发。 场景介绍 网络连接管理的典型场景有： 接收指定网络的状态变化通知 获取所有注册的网络 根据数据网络查询网络的连接信息 使用对应网络解析域名，获取所有IP 以下分别介绍具体开发方式。 接口说明 完整的JS API说明以及实例代码请参考：网络连接管理。 接口名 描述 getDefaultNet(callback: AsyncCallback): void; 获取一个含有默认网络的netId的NetHandle对象，使用callback回调。 getDefaultNetSync(): NetHandle; 使用同步方法获取默认激活的数据网络。可以使用getNetCapabilities去获取网络的类型、拥有的能力等信息。 getNetCapabilities(netHandle: NetHandle, callback: AsyncCallback): void; 查询默认网络的能力集信息，使用callback回调。 createNetConnection(netSpecifier?: NetSpecifier, timeout?: number): NetConnection; 返回一个NetConnection对象，netSpecifier指定关注的网络的各项特征，timeout是超时时间(单位是毫秒)，netSpecifier是timeout的必要条件，两者都没有则表示关注默认网络。 on(type: 'netAvailable', callback: Callback): void; 监听收到网络可用的事件。 on(type: 'netCapabilitiesChange', callback: Callback): void; 监听网络能力变化的事件。 on(type: 'netLost', callback: Callback): void; 监听网络丢失的事件。 on(type: 'netUnavailable', callback: Callback): void; 监听网络不可用的事件。 register(callback: AsyncCallback): void; 注册默认网络或者createNetConnection中指定的网络的监听。 unregister(callback: AsyncCallback): void; 注销默认网络或者createNetConnection中指定的网络的监听。 接收指定网络的状态变化通知 声明接口调用所需要的权限：ohos.permission.GET_NETWORK_INFO。 此权限级别为normal，在申请权限前，请保证符合权限使用的基本原则。然后参考配置文件权限声明指导文档声明对应权限。 从@ohos.net.connection中导入connection命名空间。 调用createNetConnection方法，指定网络能力、网络类型和超时时间（可选，如不传入代表默认网络；创建不同于默认网络时可通过指定这些参数完成），创建一个NetConnection对象。 调用该对象的on()方法，传入type和callback，订阅相应事件。 调用该对象的register()方法，订阅指定网络状态变化的通知。 当网络可用时，会收到netAvailable事件的回调；当网络不可用时，会收到netUnavailable事件的回调。 当不使用该网络时，可以调用该对象的unregister()方法，取消订阅。 // 引入包名 import connection from '@ohos.net.connection'; import { BusinessError } from '@ohos.base'; let netSpecifier: connection.NetSpecifier = { netCapabilities: { // 假设当前默认网络是Wi-Fi，需要创建蜂窝网络连接，可指定网络类型为蜂窝网 bearerTypes: [connection.NetBearType.BEARER_CELLULAR], // 指定网络能力为Internet networkCap: [connection.NetCap.NET_CAPABILITY_INTERNET] }, }; // 指定超时时间为10s(默认值为0) let timeout = 10 * 1000; // 创建NetConnection对象 let conn = connection.createNetConnection(netSpecifier, timeout); // 订阅指定网络状态变化的通知 conn.register((err: BusinessError, data: void) => { console.log(JSON.stringify(err)); }); // 订阅事件，如果当前指定网络可用，通过on_netAvailable通知用户 conn.on('netAvailable', ((data: connection.NetHandle) => { console.log(\"net is available, netId is \" + data.netId); })); // 订阅事件，如果当前指定网络不可用，通过on_netUnavailable通知用户 conn.on('netUnavailable', ((data: void) => { console.log(\"net is unavailable, data is \" + JSON.stringify(data)); })); // 当不使用该网络时，可以调用该对象的unregister()方法，取消订阅 conn.unregister((err: BusinessError, data: void) => { }); 根据数据网络查询网络的能力信息及连接信息 开发步骤 声明接口调用所需要的权限：ohos.permission.GET_NETWORK_INFO。 此权限级别为normal，在申请权限前，在申请权限前，请保证符合权限使用的基本原则。然后参考配置文件权限声明指导文档声明对应权限。 从@ohos.net.connection中导入connection命名空间。 通过调用getDefaultNet方法，获取默认的数据网络(NetHandle)；或者通过调用getAllNets方法，获取所有处于连接状态的网络列表(Array)。 调用getNetCapabilities方法，获取NetHandle对应网络的能力信息。能力信息包含了网络类型(蜂窝网络、Wi-Fi网络、以太网网络等)、网络具体能力等网络信息。 调用getConnectionProperties方法，获取NetHandle对应网络的连接信息。 import connection from '@ohos.net.connection'; import { BusinessError } from '@ohos.base'; // 构造单例对象 export class GlobalContext { public netList: connection.NetHandle[] = []; public netHandle: connection.NetHandle|null = null; private constructor() {} private static instance: GlobalContext; private _objects = new Map(); public static getContext(): GlobalContext { if (!GlobalContext.instance) { GlobalContext.instance = new GlobalContext(); } return GlobalContext.instance; } getObject(value: string): Object | undefined { return this._objects.get(value); } setObject(key: string, objectClass: Object): void { this._objects.set(key, objectClass); } } // 调用getDefaultNet方法，获取默认的数据网络(NetHandle) connection.getDefaultNet((err: BusinessError, data:connection.NetHandle) => { console.log(JSON.stringify(err)); console.log(JSON.stringify(data)); if (data) { GlobalContext.getContext().netHandle = data; } }) // 获取NetHandle对应网络的能力信息。能力信息包含了网络类型、网络具体能力等网络信息 connection.getNetCapabilities(GlobalContext.getContext().netHandle, (err: BusinessError, data: connection.NetCapabilities) => { console.log(JSON.stringify(err)); // 获取网络类型(bearerTypes) let bearerTypes: Set = new Set(data.bearerTypes); let bearerTypesNum = Array.from(bearerTypes.values()); for (let item of bearerTypesNum) { if (item == 0) { // 蜂窝网 console.log(JSON.stringify(\"BEARER_CELLULAR\")); } else if (item == 1) { // Wi-Fi网络 console.log(JSON.stringify(\"BEARER_WIFI\")); } else if (item == 3) { // 以太网网络 console.log(JSON.stringify(\"BEARER_ETHERNET\")); } } // 获取网络具体能力(networkCap) let itemNumber : Set = new Set([0, 11, 12, 15, 16]); let dataNumber = Array.from(itemNumber.values()); for (let item of dataNumber) { if (item == 0) { // 表示网络可以访问运营商的MMSC（Multimedia Message Service，多媒体短信服务）发送和接收彩信 console.log(JSON.stringify(\"NET_CAPABILITY_MMS\")); } else if (item == 11) { // 表示网络流量未被计费 console.log(JSON.stringify(\"NET_CAPABILITY_NOT_METERED\")); } else if (item == 12) { // 表示该网络应具有访问Internet的能力，该能力由网络提供者设置 console.log(JSON.stringify(\"NET_CAPABILITY_INTERNET\")); } else if (item == 15) { // 表示网络不使用VPN（Virtual Private Network，虚拟专用网络） console.log(JSON.stringify(\"NET_CAPABILITY_NOT_VPN\")); } else if (item == 16) { // 表示该网络访问Internet的能力被网络管理成功验证，该能力由网络管理模块设置 console.log(JSON.stringify(\"NET_CAPABILITY_VALIDATED\")); } } }) WebSocket连接 使用WebSocket建立服务器与客户端的双向连接，需要先通过createWebSocket()方法创建WebSocket对象，然后通过connect()方法连接到服务器。当连接成功后，客户端会收到open事件的回调，之后客户端就可以通过send()方法与服务器进行通信。当服务器发信息给客户端时，客户端会收到message事件的回调。当客户端不要此连接时，可以通过调用close()方法主动断开连接，之后客户端会收到close事件的回调。 若在上述任一过程中发生错误，客户端会收到error事件的回调。 说明 在使用此功能前，需要先完成配置服务器域名。 接口说明 WebSocket连接功能主要由WebSocket模块提供。使用该功能需要申请ohos.permission.INTERNET权限。具体接口说明如下表。 接口名 描述 createWebSocket() 创建一个WebSocket连接。 connect() 建立一个WebSocket连接 send() 通过WebSocket连接发送数据。 close() 关闭WebSocket连接。 on(type: 'open') 订阅WebSocket的打开事件。 off(type: 'open') 取消订阅WebSocket的打开事件。 on(type: 'message') 订阅WebSocket的接收到服务器消息事件。 off(type: 'message') 取消订阅WebSocket的接收到服务器消息事件。 on(type: 'close') 订阅WebSocket的关闭事件。 off(type: 'close') 取消订阅WebSocket的关闭事件。 on(type: 'error') 订阅WebSocket的Error事件。 off(type: 'error') 取消订阅WebSocket的Error事件。 开发步骤 导入需要的webSocket模块。 创建一个WebSocket连接，返回一个WebSocket对象。 （可选）订阅WebSocket的打开、消息接收、关闭、Error事件。 根据URL地址，发起WebSocket连接。 使用完WebSocket连接之后，主动断开连接。 使用WebSocket建立服务器与客户端的双向连接，需要先通过createWebSocket()方法创建WebSocket对象，然后通过connect()方法连接到服务器。当连接成功后，客户端会收到open事件的回调，之后客户端就可以通过send()方法与服务器进行通信。当服务器发信息给客户端时，客户端会收到message事件的回调。当客户端不要此连接时，可以通过调用close()方法主动断开连接，之后客户端会收到close事件的回调。 若在上述任一过程中发生错误，客户端会收到error事件的回调。 说明 在使用此功能前，需要先完成配置服务器域名。 接口说明 WebSocket连接功能主要由WebSocket模块提供。使用该功能需要申请ohos.permission.INTERNET权限。具体接口说明如下表。 接口名 描述 createWebSocket() 创建一个WebSocket连接。 connect() 建立一个WebSocket连接 send() 通过WebSocket连接发送数据。 close() 关闭WebSocket连接。 on(type: 'open') 订阅WebSocket的打开事件。 off(type: 'open') 取消订阅WebSocket的打开事件。 on(type: 'message') 订阅WebSocket的接收到服务器消息事件。 off(type: 'message') 取消订阅WebSocket的接收到服务器消息事件。 on(type: 'close') 订阅WebSocket的关闭事件。 off(type: 'close') 取消订阅WebSocket的关闭事件。 on(type: 'error') 订阅WebSocket的Error事件。 off(type: 'error') 取消订阅WebSocket的Error事件。 开发步骤 导入需要的webSocket模块。 创建一个WebSocket连接，返回一个WebSocket对象。 （可选）订阅WebSocket的打开、消息接收、关闭、Error事件。 根据URL地址，发起WebSocket连接。 使用完WebSocket连接之后，主动断开连接。 import webSocket from '@ohos.net.webSocket'; import { BusinessError } from '@ohos.base'; let defaultIpAddress = \"ws://\"; let ws = webSocket.createWebSocket(); ws.on('open', (err: BusinessError, value: Object) => { console.log(\"on open, status:\" + JSON.stringify(value)); // 当收到on('open')事件时，可以通过send()方法与服务器进行通信 ws.send(\"Hello, server!\", (err: BusinessError, value: boolean) => { if (!err) { console.log(\"Message sent successfully\"); } else { console.log(\"Failed to send the message. Err:\" + JSON.stringify(err)); } }); }); ws.on('message', (err: BusinessError, value: string | ArrayBuffer) => { console.log(\"on message, message:\" + value); // 当收到服务器的`bye`消息时（此消息字段仅为示意，具体字段需要与服务器协商），主动断开连接 if (value === 'bye') { ws.close((err: BusinessError, value: boolean) => { if (!err) { console.log(\"Connection closed successfully\"); } else { console.log(\"Failed to close the connection. Err: \" + JSON.stringify(err)); } }); } }); ws.on('close', (err: BusinessError, value: webSocket.CloseResult) => { console.log(\"on close, code is \" + value.code + \", reason is \" + value.reason); }); ws.on('error', (err: BusinessError) => { console.log(\"on error, error:\" + JSON.stringify(err)); }); ws.connect(defaultIpAddress, (err: BusinessError, value: boolean) => { if (!err) { console.log(\"Connected successfully\"); } else { console.log(\"Connection failed. Err:\" + JSON.stringify(err)); } }); 配置服务器域名 为规范元服务请求域名范围，提升元服务上架审核效率和平台合规经营安全性，AGC基于云开发功能构建域名管控能力作为元服务生态管控的重要抓手，支持开发者在元服务上架前申请开放使用的服务器域名。后续当用户使用元服务时，将根据该元服务的域名配置进行域名访问，为用户提供安全可靠的网络环境，从而提升用户信任度和满意度。并且域名管控支持定期自动导入全局禁止清单内的域名，实现域名数据的自动化更新，时刻确保网络的正常运行和信息的安全传输。 说明 域名管控能力会随ROM升级逐步落地，为了不影响使用已发布的元服务，建议开发者到AppGallery Connect完成服务器域名相关配置。 如未通过AGC配置相关域名，元服务发起的网络请求将会被域名管控拦截，影响用户使用。 前提条件 开发者帐号已完成实名认证，且归属地为中国大陆地区。 配额限制 同一个元服务每个自然月服务器域名修改次数，默认为50次。每修改一次域名，剩余修改次数减一。 若修改次数不能满足您的需求，您可发送邮件向华为运营人员申请放宽限制。在收到您的申请后，华为运营人员将在1-3个工作日内为您安排对接人员。申请方法如下： 申请邮箱地址：atomicservice@huawei.com。 邮件标题：[服务器域名配置]-[元服务名称]-[APP ID]-[Developer ID]，APP ID等查询方法可参见查看应用基本信息。 邮件正文：请说明申请放宽修改次数原因。 配置服务器域名 1.登录AppGallery Connect，点击“我的项目”。 2.在项目列表中点击您的项目，然后在页面顶端选择需配置服务器域名的元服务名称。 3.在左侧导航栏选择“开发管理 > 域名配置 > 服务器域名”，进入服务器域名配置主界面。 4.当前支持配置httpRequest、webSocket、download、upload四种服务器类型的域名，点击“修改”。 5.在“服务器域名配置”弹框中，根据您的服务器类型，在对应服务器域名输入框中输入要新增的域名。 域名仅支持英文大小写字母、数字以及符号“-”“.”，且单个域名长度不能超过128个字符，不同域名之间以英文\";\"分隔。 注意 域名只支持HTTPS和WSS协议。 域名不能使用IP地址或localhost。 不可配置全局禁止清单内的域名。 单项服务器域名配置数量最多不超过200个。 配置项 说明 httpRequest合法域名 httpRequest服务器域名，以“https://”开头 webSocket合法域名 webSocket服务器域名，以“wss://”开头，不需要配置端口，默认允许请求该域名下所有端口。 download合法域名 download服务器域名，以“https://”开头 upload合法域名 upload服务器域名，以“https://”开头 6.配置域名过程中，若提示“输入内容包含非法域名”，可点击提示信息旁边的“查看详情”查看具体的错误信息。 7.根据“服务器域名错误信息”弹框提示信息，对报错域名进行修改。 可能出现的域名配置错误有以下几种情况： 失败原因 解决方法 该域名协议头非法 按照服务器域名类型修改为合法协议头。httpRequest/download/upload服务器域名以“https://”开头。webSocket服务器域名以“wss://”开头。 不能使用IP地址作为域名 设置为合法域名。 不能使用本地域名localhost 设置为合法域名。 域名格式不合法，域名格式只支持英文大小写字母、数字及符号“-”“.” 去除域名中包含的非法字符。 webSocket域名不能包含端口号 webSocket服务器类型的域名不需要配置端口，默认允许请求该域名下所有端口，去除域名中包含的端口。 域名长度超过128 单个域名长度不超过128个字符。 为保障安全不可使用此域名地址 配置的域名存在于域名禁止清单内，已被全局禁用，需替换为合法域名。 8.域名正确配置完成后，点击“提交”将新增域名提交审核。当弹出提示框显示“提交成功”时，表示新增域名成功，点击“确认”将返回域名配置列表。 9.在域名列表，您可看到不同服务器下已配置的域名、已配置的域名数量、可配置的域名总数量信息。 后续若您需要修改或删除已添加的域名，可点击“修改”进行刷新。 跳过域名校验 在元服务开发过程中，您可以在HarmonyOS设备端临时开启“开发中元服务豁免管控”选项，跳过服务器域名的校验。操作方法如下： 打开“设置 > 关于本机”，多次点击版本号，打开开发者模式。 打开“设置 > 系统”，在下方找到“开发者选项”并点击进入。 在下方“应用”区域，打开“开发中元服务豁免管控”开关。 选项开启后在设备上运行非正式版本的元服务时，将不再进行服务器域名的校验。 服务器域名配置成功后，建议您关闭此选项进行开发，并在各平台下进行测试，以确认服务器域名配置正确。 powered by Gitbook该文件修订时间： 2024-11-05 16:05:57 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}