{"./":{"url":"./","title":"1.前言","keywords":"","body":"前言 关注到目前很多人都很是关注元服务如何开发，于是集合坚果派的力量，利用业余时间写了这本入门的《元服务开发实践》电子书并把它挂到网站上，希望能给读者带来一点帮助，也算为元服务以及整个大的鸿蒙生态的发展做一点贡献。 本书组织结构 本书以循序渐进的方式从元服务介绍入手，到最后的落地实践，分为五篇，共计 16 章，各篇的主要内容如下： 第一篇，入门篇（第1章~第5章），包括 元服务的介绍 第二篇，进阶篇（第6章~第12章）， 第三篇，高阶篇（第13章~第16章），包括 OpenHarmony 实现万物互联的核心分布式软总线介绍，它的应用场景：原子化服务和服务卡片，分布式数据库，分布式相机以及分布式屏幕等。该章节还在创作中。 第四篇，实战篇（第17章~第18章），通过极简计算器项目给读者串联一下以上各章节的知识点，让读者更深层次的理解 OpenHarmony 应用的开发流程以及项目实战中常用的开发技巧。 第五篇，源码篇（第 19 章），通过源码分析，讲解 OpenHarmony 应用的启动过程，比如 FA 的启动，abc 的加载和解析并生成 jsview 的流程，各节点的构建流程及各结点的测量、布局和绘制等操作，最后再讲解一下事件传递过程。 本书读者对象 读者至少熟悉一种编程语言，最好是 JavaScript/或者Dart 。 读者最好接触过移动端、Web 前端或者 PC 端开发。 本书只是简介类书籍，不适合编程的入门读物。 勘误 笔者写这本电子书使用的 SDK 是 NEXT 版本（API 12，5.0.0.71），由于ArkUI开发框架在不断更新中，本书的部分内容可能会和新版本的不一致，读者以最新的版本为准，另外由于时间仓促，本书难免有错误之处，如果读者发现错误欢迎在 https://gitee.com/ark-ui/arkui_in_action 上提 Issue，也可以加 QQ 群（695438501）反馈问题或者交流技术。 致谢 笔者写这本电子书的时候主要参考元服务官方文档，期间发现问题后并及时做了反馈，感谢鸿蒙专家们给做了耐心解答。另外非常感谢在 https://gitcode.com/nutpi/Flutter_Harmony 上和 QQ （695438501）群里给我反馈问题的小伙伴，最后感谢所有为 鸿蒙生态建设做出贡献的人，你们是最棒的！ powered by Gitbook该文件修订时间： 2024-10-31 22:29:56 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter2/Why.html":{"url":"chapter2/Why.html","title":"2.为什么要这个专栏？","keywords":"","body":"为什么 powered by Gitbook该文件修订时间： 2024-10-31 22:43:57 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter3/3.1什么是元服务.html":{"url":"chapter3/3.1什么是元服务.html","title":"3.1什么是元服务","keywords":"","body":"元服务 在万物互联时代，人均持有设备量不断攀升，设备种类和使用场景更加多样，使得应用开发、应用入口变得更加复杂。在此背景下，应用提供方和用户迫切需要一种新的服务提供方式，使应用开发更简单、服务（如听音乐、打车等）的获取和使用更便捷。为此，HarmonyOS除支持传统的需要安装的应用（以下简称传统应用）外，还支持更加方便快捷的免安装的应用，即元服务。 元服务是HarmonyOS提供的一种轻量应用程序形态，具备秒开直达，纯净清爽；服务相伴，恰合时宜；即用即走，账号相随；一体两面，嵌入运行；原生智能，全域搜索；高效开发，生而可信等特征。 元服务可独立上架、分发、运行，独立实现业务闭环，可大幅提升信息与服务的获取效率。 元服务基于HarmonyOS SDK（只能使用“元服务API集”）开发，支持运行在1+8+N设备上，供用户在合适的场景、合适的设备上便捷使用。 元服务与传统应用的对比 区别 特征 载体 API范围 经营 传统应用 手动下载安装 包大小无限制 按需使用 应用内或应用市场更新 功能齐全，开发成本高，周期长 跟随设备 全量API 自主运营人找应用成本高 元服务 免安装包大小有限制即用即走自动更新轻量化完整功能，开发成本较低 跟随华为账号 只能使用“元服务API集” 支付、地图、广告等经营履约能力辅助经营负一屏等系统分发入口帮助人找服务、服务找人 开发者基于经营目标、效率、成本、收益等因素，自主决定开发传统应用或元服务，也可以同时提供。 从应用程序入口看，下图展示了元服务与传统应用、服务卡片之间的关系。对于传统应用和元服务，均可选择服务卡片作为入口。 元服务与传统应用、服务卡片之间的关系。 元服务在开发态和运行态的基本视图如下图所示。 ‘ powered by Gitbook该文件修订时间： 2024-11-01 08:08:07 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter3/3.2元服务特征以及使用场景.html":{"url":"chapter3/3.2元服务特征以及使用场景.html","title":"3.2元服务特征及使用场景","keywords":"","body":"元服务特征 元服务区别于传统应用，具备如下特征，并适用于如下典型场景。 秒开直达，纯净清爽 元服务能够即点即用，实现秒开启动，丝滑流畅。 元服务默认隐匿登录直达使用，无弹窗干扰，给予用户纯净体验。 基于HarmonyOS，有多个分发入口，能够更高效地触达用户。 服务相伴，恰合适宜 服务面板在负一屏、锁屏界面等常伴跟随，服务履约过程中提供的信息由官方保障。 服务通知和状态恰和适宜的提醒，将提供更便捷、高效的服务闭环。 用完即走，帐号相随 用户使用完元服务后，退出无二次弹窗。 用户资产跟随账号，多设备安全同步。用户可随时找回自己的元服务。 一体两面，嵌入运行 元服务和应用是鸿蒙生态下的两种程序形态，元服务免安装，更为轻量。 两者可独立部署，也可以嵌入运行，助力商户私域运营。 原生智能，全域搜索 元服务是基于鸿蒙OS底座实现的原生智能最佳载体，提供精准的服务触达和原生自然的体验。 在全域搜索中，任何的服务都能触达用户。 高效开发，生而可信 提供元服务标准UX组件集、场景化模板及API集，同时构建元服务生态规则，开发者在规则之上高效开发，实现生而可信。 元服务的典型使用场景 基于上述特征，元服务的典型使用场景如下。 常用服务卡片添加到桌面，体验快捷服务 例如：将常用的天气、备忘录及热点新闻列表等服务卡片添加到桌面上，解锁手机即可在桌面上查看即时信息。 同时，通过负一屏发现服务卡片，无需安装即可使用热点服务卡片。 释放手机，让用户在更合适的设备上享受服务 例如：打车是人们日常生活中经常使用的服务，通常人们在手机上打车，需要一直停留在手机界面才能准确获取司机的状态信息。 有了元服务的分布式能力，在手机打车后，将司机状态实时同步到手表，无需查看手机，抬腕即可获取司机状态。 powered by Gitbook该文件修订时间： 2024-11-01 08:08:15 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter3/3.3元服务程序包基础知识.html":{"url":"chapter3/3.3元服务程序包基础知识.html","title":"3.3元服务程序包基础知识","keywords":"","body":"powered by Gitbook该文件修订时间： 2024-11-01 08:08:22 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/SUMMARY.html":{"url":"chapter4/SUMMARY.html","title":"4.元服务开发流程","keywords":"","body":"元服务开发旅程 powered by Gitbook该文件修订时间： 2024-10-31 22:53:26 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/4.1开发前.html":{"url":"chapter4/4.1开发前.html","title":"4.1开发前","keywords":"","body":"开发前 创建元服务项目前，需要注册华为开发者帐号并创建您的元服务；然后搭建开发环境，通过DevEco Studio创建元服务工程。 说明 元服务包名命名格式需要使用com.atomicservice.[appid]，请先在网站创建元服务，获取AppID后再创建工程。 在AppGallery Connect上，可以通过“我的元服务”选择对应元服务，在“应用信息”可查询元服务的appid。 powered by Gitbook该文件修订时间： 2024-11-01 08:06:42 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/4.2开发中.html":{"url":"chapter4/4.2开发中.html","title":"4.2开发中","keywords":"","body":"开发中 元服务包含页面、卡片、图标三个部分，请分别参考UI开发、服务卡片开发、生成元服务图标。 DevEco Studio提供元服务图片生成工具，开发者可以通过上传指定尺寸和格式的图片，快速生成元服务图标。 同时，DevEco Studio提供真机调试能力，开发者可快速通过真机运行调试查看运行效果。 powered by Gitbook该文件修订时间： 2024-11-01 08:06:52 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/4.3打包.html":{"url":"chapter4/4.3打包.html","title":"4.3打包","keywords":"","body":"打包 可通过DevEco Studio快速打包生成发布版本，使用此版本，可以用于开放式测试或提交上架审核。 powered by Gitbook该文件修订时间： 2024-11-01 08:07:00 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter4/4.4测试.html":{"url":"chapter4/4.4测试.html","title":"4.4测试","keywords":"","body":"测试 在正式发布元服务前，您可以发布一个开放式测试版本，邀请部分用户提前体验新版本，并收集用户的反馈，以便提前发现问题进行改进，从而保证全网版本的质量，提升用户体验。 powered by Gitbook该文件修订时间： 2024-11-01 08:07:09 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/5.2生成元服务图标.html":{"url":"chapter5/5.2生成元服务图标.html","title":"5.2生成元服务图标","keywords":"","body":"生成元服务图标 DevEco Studio支持Image Asset功能，帮助开发者生成统一的元服务图标样式。 powered by Gitbook该文件修订时间： 2024-11-01 08:13:57 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/5.3构建元服务页面.html":{"url":"chapter5/5.3构建元服务页面.html","title":"5.3构建元服务页面","keywords":"","body":"powered by Gitbook该文件修订时间： 2024-11-01 08:23:21 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/5.4新建元服务卡片.html":{"url":"chapter5/5.4新建元服务卡片.html","title":"5.4新建元服务卡片","keywords":"","body":"新建元服务卡片 在元服务中新建一张卡片。 在“Project”窗口，在“entry”模块目录右键选择“New > Service Widget > Dynamic Widget”，进入卡片模板选择界面，如下图所示： powered by Gitbook该文件修订时间： 2024-11-01 08:23:29 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/5.5使用真机运行元服务.html":{"url":"chapter5/5.5使用真机运行元服务.html","title":"5.5使用真机运行元服务","keywords":"","body":"使用真机运行元服务 powered by Gitbook该文件修订时间： 2024-11-01 08:23:45 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.1元服务开发准备.html":{"url":"chapter6/6.1元服务开发准备.html","title":"6.1元服务开发准备","keywords":"","body":"在开始元服务开发前，需要先完成以下准备工作。 注册成为开发者 在华为开发者联盟网站上，注册成为开发者，并完成实名认证，从而享受联盟开放的各类能力和服务。 创建元服务 在AppGallery Connect（简称AGC）上，参考创建项目和创建元服务完成HarmonyOS元服务的创建，从而使用各类服务。 配置安装DevEco Studio 安装最新版DevEco Studio。具体安装指导请参见安装DevEco Studio。 如何在DevEco Studio中创建工程、构建元服务页面、新建元服务卡片等，可参考开发第一个元服务。 （可选）添加公钥指纹 当应用需要使用以下开放能力的一种或多种时，为正常调试运行应用，需要预先添加公钥指纹。 Account Kit（华为帐号服务） Health Service Kit（运动健康服务） IAP Kit（应用内支付服务） Map Kit（地图服务） Payment Kit（华为支付服务） Wallet Kit（钱包服务） 添加公钥指纹的步骤如下。 申请应用证书（.cer）、Profile（.p7b）文件，具体操作请参见调试HarmonyOS应用/元服务。 powered by Gitbook该文件修订时间： 2024-11-01 08:28:39 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.2元服务框架开发.html":{"url":"chapter6/6.2元服务框架开发.html","title":"6.2元服务框架开发","keywords":"","body":"应用模型 元服务的应用模型只支持Stage模型，参考Stage模型开发指南。 元服务与传统应用的应用模型差异点主要体现在ExtensionAbility，具体如下： 元服务ExtensionAbility组件只支持FormExtensionAbility这一种类型。 应用上下文ExtensionContext只能被FormExtensionContext继承。 此外，元服务还有如下约束限制： 不支持启动UIAbility时指定窗口模式。 不支持通过Call调用实现UIAbility交互。 不支持使用ApplicationContext订阅回调低内存判断。 不支持使用createBundleContext(bundleName:string)方法，创建其他应用的Context信息。 不支持使用createModuleContext(bundleName:string, moduleName:string)方法，获取指定应用指定Module的上下文信息。 访问控制 元服务针对访问控制的开发与传统应用的开发方式大致相同，详见访问控制开发指导。 分包加载 跳转 powered by Gitbook该文件修订时间： 2024-11-01 08:29:31 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.4服务卡片开发.html":{"url":"chapter6/6.4服务卡片开发.html","title":"6.4服务卡片开发","keywords":"","body":"powered by Gitbook该文件修订时间： 2024-11-01 08:31:02 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.5基础能力开发.html":{"url":"chapter6/6.5基础能力开发.html","title":"6.5基础能力开发","keywords":"","body":"powered by Gitbook该文件修订时间： 2024-11-01 08:31:08 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter6/6.6经营履约能力开发.html":{"url":"chapter6/6.6经营履约能力开发.html","title":"6.6经营履约能力开发","keywords":"","body":"powered by Gitbook该文件修订时间： 2024-11-01 08:31:16 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}